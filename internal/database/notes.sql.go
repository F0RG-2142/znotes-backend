// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: notes.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const deleteNote = `-- name: DeleteNote :exec
DELETE FROM notes WHERE id = $1 AND user_id = $2
`

type DeleteNoteParams struct {
	ID     uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) DeleteNote(ctx context.Context, arg DeleteNoteParams) error {
	_, err := q.db.ExecContext(ctx, deleteNote, arg.ID, arg.UserID)
	return err
}

const getAllNotes = `-- name: GetAllNotes :many
SELECT id, name, created_at, updated_at, body, user_id FROM notes WHERE user_id = $1 ORDER BY created_at ASC
`

func (q *Queries) GetAllNotes(ctx context.Context, userID uuid.UUID) ([]Note, error) {
	rows, err := q.db.QueryContext(ctx, getAllNotes, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Note
	for rows.Next() {
		var i Note
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Body,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNoteByID = `-- name: GetNoteByID :one
SELECT id, name, created_at, updated_at, body, user_id FROM notes WHERE id = $1 AND user_id = $2
`

type GetNoteByIDParams struct {
	ID     uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) GetNoteByID(ctx context.Context, arg GetNoteByIDParams) (Note, error) {
	row := q.db.QueryRowContext(ctx, getNoteByID, arg.ID, arg.UserID)
	var i Note
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Body,
		&i.UserID,
	)
	return i, err
}

const newNote = `-- name: NewNote :one
INSERT INTO notes (id, created_at, updated_at, body, user_id)
VALUES (
    gen_random_uuid (),
    NOW(),
    NOW(),
    $1,
    $2 
)
RETURNING id
`

type NewNoteParams struct {
	Body   string
	UserID uuid.UUID
}

func (q *Queries) NewNote(ctx context.Context, arg NewNoteParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, newNote, arg.Body, arg.UserID)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const updateNote = `-- name: UpdateNote :exec
UPDATE notes
SET 
    updated_at = NOW(),
    body = $1,
    name = $2
WHERE 
    id = $3
`

type UpdateNoteParams struct {
	Body string
	Name string
	ID   uuid.UUID
}

func (q *Queries) UpdateNote(ctx context.Context, arg UpdateNoteParams) error {
	_, err := q.db.ExecContext(ctx, updateNote, arg.Body, arg.Name, arg.ID)
	return err
}
